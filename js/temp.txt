
        if(el ==='@') loop(str, {from:i, cb:(s, f, t, r)=>{
          at_rule  = (at_rule +=t = s[f = i++]).replace('/*/', '');
          if(t+s[f+1]==='/*') i = storeComments(f, str, base.comments)-1;
          else if(/\{|;/.test(t)) return true
        }});
        else if(el==='}') getStyleRule(i-1, str)[2]&&(at_rule='');
        
        else if(el==='{') curly_index=i, loop(str, {from:++i, cb:(s, f)=>{

          /** the assignment below makes the loop continue from where comments stop */
            f = i++;
            if(s[f]+s[f+1]==='/*') i = storeComments(f, str, base.comments)-1;
            res = (res+=str[f]).replace('/*/', '');

            if('}'=== s[f+1]) {
              i = ++f,
              css+=res+'}';
              let styleRule = (at_rule&&at_rule+' ') + getStyleRule(curly_index, str)[0].replace(at_rule, '').trim(), sels, index=0;

              res.replace(rgx, (a,b,c, _res)=> {
                _res = result[sel_prop=a], sels = _res.selectors,
                _res.matched = _res.matched.concat(separateProperties(res).filter((e, _i)=>(e=rgx.test(e))&&++index  )), index&&[base, _res].forEach(arr=>arr.indexes.push(index));
                /\{/.test(sels[sel_ind-1]||'')
                ? !at_rule&&(sels[sel_ind-1]+= ' }')
                : at_rule&&(styleRule+=' {'),
                console.log('MATCH::', res, styleRule, rgx)
                //sel_ind = _res.selectors.push(styleRule)
              }),
              res = '';
              /** the return statement below ends this loop */
              return true;
            }
          }
          
        });
        /* the increment below is not to be modified otherwise inconsistencies will arise */
        let temp=result[sel_prop];
        temp &&=temp.selectors;
        temp&&i >= len-1 && /\{/.test(temp[sel_ind=temp.length-1])&&(temp[sel_ind]= temp[sel_ind].replace(/\{$/, '')+' }'),
        i = self.index++ // i = self.index++; //needed to make i not exceed j when boosting, by storing in globally